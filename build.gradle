/*
 * Copyright 2021 Blazeash Co.,Ltd. AllRights Reserved.
 */
buildscript {
    ext {
        /************* 開発環境 *************/
        dbUrl = 'jdbc:mysql://localhost:3306/blazeash?useSSL=false&useInformationSchema=true&characterEncoding=utf-8'
        dbUser = 'root'
        dbPassword = 'password'
        /************* 本番環境 *************/
//        dbUrl = 'jdbc:mysql://lemonico.crwkn7mkbqkv.ap-northeast-1.rds.amazonaws.com:3306/lemonico?useSSL=false&useInformationSchema=true'
//        dbUser = 'admin'
//        dbPassword = 'password'
    }
    dependencies {
        classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:6.0.6"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:5.16.0"
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id "org.flywaydb.flyway" version "5.0.7"
    id 'org.springframework.boot' version '2.7.6'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.flywaydb.flyway'
apply plugin: "com.diffplug.spotless"
apply plugin: 'io.spring.dependency-management'

group 'blazeash.com'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava.options.encoding = "UTF-8"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

configurations {
    domaGenRuntime
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.seasar.doma:doma-processor:2.53.0'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.7.3'

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-test'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'

    // json web token
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

    // aop関連
    implementation 'org.aspectj:aspectjweaver:1.9.9.1'

    // DBアクセス関連
    implementation 'org.seasar.doma:doma-core:2.53.0'
    implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.6.0'
    implementation 'mysql:mysql-connector-java:5.1.49'
    implementation 'com.h2database:h2:2.1.214'

    domaGenRuntime 'mysql:mysql-connector-java:5.1.49'
    domaGenRuntime 'org.seasar.doma:doma-gen:2.28.0'


    // AWS JAVA SDK For Amazon S3
    implementation 'software.amazon.awssdk:s3:2.17.271'

    // AWS JAVA SDK For Amazon Rekognition
    implementation 'software.amazon.awssdk:rekognition:2.17.271'

    // Junit Test
    implementation 'junit:junit:4.13.2'
    testImplementation 'org.springframework:spring-test:5.3.18'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

}

//test {
//    useJUnitPlatform()
//}

sourceSets {
    main {
        java {
            srcDirs 'src/generated/main/java'
            srcDirs 'src/main/java'
            srcDirs 'src/test/java'
        }
        resources {
            srcDirs 'src/generated/main/resources'
            srcDirs 'src/main/resources'
            srcDirs 'src/test/resources'
        }
    }
}

// 【DOMA4019】のため
task copyDomaResources(type: Sync)  {
    from sourceSets.main.resources.srcDirs
    into compileJava.destinationDir
    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
    include 'META-INF/**/*.script'
}

compileJava {
    // Depend on the above task
    dependsOn copyDomaResources
    options.encoding = 'UTF-8'
}

tasks.register('genController') {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/controller")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "com.blazeash.api.controller",
                            entitySuffix: "Controller",
                            destDir: 'src/generated/main/java')
                }
    }
}

tasks.register('genService') {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/service")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "com.blazeash.api.service",
                            entitySuffix: "Service",
                            destDir: 'src/generated/main/java')
                }
    }
}

tasks.register('genRepository') {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/repository")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "com.blazeash.api.repository",
                            entitySuffix: "Repository",
                            destDir: 'src/generated/main/java')
                }
    }
}

tasks.register('genResource') {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/resource")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "com.blazeash.api.resource",
                            entitySuffix: "Resource",
                            destDir: 'src/generated/main/java')
                }
    }
}

tasks.register('genEntity') {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/entity")
                {
                    entityConfig(
                            overwrite: true,
                            useListener: false,
//                            superclassName: 'com.blazeash.api.core.entity.LcEntity',
                            packageName: "com.blazeash.api.entity",
                            entitySuffix: "Entity",
                            destDir: 'src/generated/main/java'
                    )
                }
    }
}

tasks.register('genDao') {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/dao")
                {
                    daoConfig(
                            overwrite: true,
                            packageName: "com.blazeash.api.dao",
                            suffix: "Dao",
                            destDir: 'src/generated/main/java')
                    sqlConfig(
                            generate: true,
                            overwrite: true,
                            destDir: 'src/generated/main/resources',
                    )
                }
    }
}

tasks.register('genTestCases') {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties',
                classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: "${dbUrl}", user: "${dbUser}", password: "${dbPassword}") {
            sqlTestCaseConfig {
                fileset(dir: 'src/main/resources') {
                    include(name: 'META-INF/**/*.sql')
                }
            }
        }
    }
}

// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir
// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources

flyway {
    url = "${dbUrl}"
    user = "${dbUser}"
    password = "${dbPassword}"
    locations = ["filesystem:$projectDir/database/ddl"]
}

spotless {
    java {
        importOrder()
        eclipse().configFile file("${rootDir}/eclipse-java-code-formatter.xml")
        removeUnusedImports()
    }
}
