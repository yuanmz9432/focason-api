buildscript {
    ext {
        /************* 開発環境 *************/
        dbUrl = 'jdbc:mysql://localhost:3306/lemonico?useSSL=false'
        dbUser = 'root'
        dbPassword = 'kawasemi'
        schemaName = 'lemonico'
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.5.5"
        classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:6.0.6"
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.flywaydb.flyway'
idea.module.inheritOutputDirs = true

group 'lemoico.com'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    domaGenRuntime
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.seasar.doma:doma-processor:2.49.0'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.5.5'

    compileOnly 'org.projectlombok:lombok:1.18.20'

    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-logging:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-aop:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.5.5'

    // json web token
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // aop関連
    implementation 'org.aspectj:aspectjweaver:1.9.7'

    // DBアクセス関連
    implementation 'org.seasar.doma:doma:2.29.0'
    implementation 'org.seasar.doma:doma-core:2.49.0'
    implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.5.0'
    implementation 'mysql:mysql-connector-java:5.1.49'
    implementation 'com.h2database:h2:1.4.200'

    domaGenRuntime 'mysql:mysql-connector-java:5.1.49'
    domaGenRuntime 'org.seasar.doma:doma-gen:2.28.0'

    // https://mvnrepository.com/artifact/junit/junit
    testImplementation 'junit:junit:4.12'
}

task genAll {
    group = 'doma-gen'
}

task genRepository {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/repository")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "api.lemonico.repository",
                            entitySuffix: "Repository",
                            destDir: 'src/main/java')
                }
    }
}

task genResource {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/resource")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "api.lemonico.resource",
                            entitySuffix: "Resource",
                            destDir: 'src/main/java')
                }
    }
}

task genEntity {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/entity")
                {
                    entityConfig(
                            overwrite: true,
                            useListener: false,
                            packageName: "api.lemonico.entity",
                            destDir: 'src/main/java'
                    )
                }
    }
}

task genDao {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: "${dbUrl}",
                user: "${dbUser}",
                password: "${dbPassword}",
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/dao")
                {
                    daoConfig(
                            overwrite: true,
                            packageName: "api.lemonico.dao",
                            destDir: 'src/main/java')
                    sqlConfig(
                            overwrite: true,
                            destDir: 'src/main/resources',
                    )
                }
    }
}

//task genSql {
//    group = 'doma-gen'
//    doLast {
//        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
//        ant.gen(
//                url: "${dbUrl}",
//                user: "${dbUser}",
//                password: "${dbPassword}",
//                ignoredTableNamePattern: "flyway_schema_history",
//                templatePrimaryDir: "doma/sql")
//                {
//                    sqlConfig(
//                            overwrite: true,
//                            destDir: 'src/main/resources',
//                    )
//                }
//    }
//}

task genTestCases {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties',
                classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: "${dbUrl}", user: "${dbUser}", password: "${dbPassword}") {
            sqlTestCaseConfig {
                fileset(dir: 'src/main/resources') {
                    include(name: 'META-INF/**/*.sql')
                }
            }
        }
    }
}

task cleanGenAll(type: Delete) {
    group = 'doma-gen-clean'
    delete 'src/main/java/api/lemonico/dao'
    delete 'src/main/java/api/lemonico/entity'
    delete 'src/main/java/api/lemonico/repository'
}

task cleanGenDao(type: Delete) {
    group = 'doma-gen-clean'
    delete 'src/main/java/api/lemonico/dao'
}

task cleanGenEntity(type: Delete) {
    group = 'doma-gen-clean'
    delete 'src/main/java/api/lemonico/entity'
}

task cleanGenResource(type: Delete) {
    group = 'doma-gen-clean'
    delete 'src/main/java/api/lemonico/resource'
}

task cleanGenRepository(type: Delete) {
    group = 'doma-gen-clean'
    delete 'src/main/java/api/lemonico/repository'
}

//task cleanGenSql(type: Delete) {
//    group = 'doma-gen-clean'
//    delete 'src/main/java/api/lemonico/sql'
//}

/**
 * genAllの実行順序は下記となります。
 * cleanGenAll → genRepository → genEntity → genDao → genAll
 */
genAll.dependsOn genDao
genDao.dependsOn genEntity
genEntity.dependsOn genRepository
genRepository.dependsOn cleanGenAll

genDao.dependsOn cleanGenDao
genRepository.dependsOn cleanGenRepository
genResource.dependsOn cleanGenResource

flywayMigrate.mustRunAfter flywayClean

flyway {
    url = "${dbUrl}"
    user = "${dbUser}"
    password = "${dbPassword}"
    locations = ["filesystem:$projectDir/db/migration"]
    table = 'flyway_schema_history'
    baselineOnMigrate = false
}
