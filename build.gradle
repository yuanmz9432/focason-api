//=====================================================
// Copyright 2022 Lemonico Co.,Ltd. AllRights Reserved.
//=====================================================
buildscript {
    ext {
    }
    dependencies {
        classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:6.0.6"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:5.16.0"
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id "org.flywaydb.flyway" version "5.0.7"
    id 'org.springframework.boot' version '2.7.6'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.flywaydb.flyway'
apply plugin: "com.diffplug.spotless"
apply plugin: 'io.spring.dependency-management'

group 'lemoico.com'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava.options.encoding = "UTF-8"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

configurations {
    domaGenRuntime
}

dependencies {
    // Spring Boot Starter
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework:spring-mock:2.0.8'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security.oauth:spring-security-oauth2:2.5.2.RELEASE'
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.5.2'


    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // Google
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.google.zxing:core:3.5.0'
    implementation 'com.google.zxing:javase:3.5.0'
    // doma2
    implementation 'org.seasar.doma:doma-core:2.51.0'
    annotationProcessor 'org.seasar.doma:doma-processor:2.51.0'
    implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.5.0'
    // Doma-gen
    domaGenRuntime 'org.seasar.doma:doma-gen:2.28.0'
    domaGenRuntime 'org.postgresql:postgresql:42.3.6'
    // Postgresql
    runtimeOnly 'org.postgresql:postgresql:42.3.6'
    /**
     * AWS JAVA SDK 2.0
     */
    implementation 'software.amazon.awssdk:aws-core:2.17.209'
    implementation 'software.amazon.awssdk:s3:2.17.209'
    implementation 'software.amazon.awssdk:sts:2.17.209'
    /**
     * AWS JAVA SDK 1.0
     */
    implementation 'com.amazonaws:aws-java-sdk:1.12.239'
    /**
     * Alibaba
     */
    implementation 'com.alibaba:druid:1.2.11'
    implementation 'com.alibaba:fastjson:2.0.7'
    /**
     * Github
     */
    implementation 'com.github.jiangxincode:cpdetector:1.0.10'
    implementation 'com.github.xiaoymin:swagger-bootstrap-ui:1.9.6'
    implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:1.2.3'
    // Swagger
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    // Shiro JWT Auth
    implementation 'org.apache.shiro:shiro-spring:1.6.0'
    implementation 'org.apache.shiro:shiro-ehcache:1.6.0'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.auth0:java-jwt:3.19.2'
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    // PDF
    implementation 'com.itextpdf:itextpdf:5.5.13.3'
    implementation 'com.itextpdf:itext-asian:5.2.0'
    // CSV
    implementation 'com.opencsv:opencsv:4.5'
    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.3'
    // Barcode
    implementation 'net.sf.barcode4j:barcode4j-light:2.0'
    // Excelツール
    implementation 'org.apache.poi:poi:3.17'
    implementation 'org.apache.poi:poi-ooxml:3.17'
    implementation 'org.apache.poi:poi-ooxml-schemas:3.17'
    // Amazon Signature
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'commons-discovery:commons-discovery:0.5'

    // JAVA 基本パッケージ
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'

    // CSV読込
    implementation 'net.sourceforge.javacsv:javacsv:2.0'
    implementation 'org.json:json:20180813'
    implementation 'joda-time:joda-time:2.10.14'

    implementation 'org.apache.axis:axis:1.4'
    implementation 'org.apache.axis:axis-jaxrpc:1.4'
    implementation 'org.apache.axis:axis-saaj:1.4'
    implementation 'org.apache.httpcomponents:httpmime:4.5.13'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    // build.gradle
    implementation "org.springdoc:springdoc-openapi-ui:1.6.4"
}

sourceSets {
    main {
        java {
            srcDirs 'src/generated/main/java'
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs 'src/generated/main/resources'
            srcDirs 'src/main/resources'
        }
    }
}

// 【DOMA4019】のため
task copyDomaResources(type: Sync)  {
    from sourceSets.main.resources.srcDirs
    into compileJava.destinationDir
    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
    include 'META-INF/**/*.script'
}

compileJava {
    // Depend on the above task
    dependsOn copyDomaResources
    options.encoding = 'UTF-8'
}


task entity {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: DB_URL,
                user: DB_USER,
                password: DB_PASSWORD,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/entity")
                {
                    entityConfig(
                            overwrite: true,
                            useListener: false,
                            packageName: "jp.co.tfg.prologi.entity",
                            entitySuffix: "Entity",
                            destDir: 'src/generated/main/java'
                    )
                }
    }
}

task controller {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: DB_URL,
                user: DB_USER,
                password: DB_PASSWORD,
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/controller")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "jp.co.tfg.prologi.temporary.controller",
                            entitySuffix: "Controller",
                            destDir: 'src/main/java')
                }
    }
}

task service {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: DB_URL,
                user: DB_USER,
                password: DB_PASSWORD,
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/service")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "jp.co.tfg.prologi.temporary.service",
                            entitySuffix: "Service",
                            destDir: 'src/main/java')
                }
    }
}

task repository {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: DB_URL,
                user: DB_USER,
                password: DB_PASSWORD,
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/repository")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "jp.co.tfg.prologi.temporary.repository",
                            entitySuffix: "Repository",
                            destDir: 'src/main/java')
                }
    }
}

task resource {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: DB_URL,
                user: DB_USER,
                password: DB_PASSWORD,
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/resource")
                {
                    entityConfig(
                            overwrite: true, useListener: false,
                            packageName: "jp.co.tfg.prologi.temporary.resource",
                            entitySuffix: "Resource",
                            destDir: 'src/main/java')
                }
    }
}

task dao {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
        ant.gen(
                url: DB_URL,
                user: DB_USER,
                password: DB_PASSWORD,
                tableNamePattern: TABLE_NAME,
                ignoredTableNamePattern: "flyway_schema_history",
                templatePrimaryDir: "doma/dao")
                {
                    daoConfig(
                            overwrite: true,
                            packageName: "jp.co.tfg.prologi.temporary.dao",
                            suffix: "Dao",
                            destDir: 'src/main/java')
                    sqlConfig(
                            generate: true,
                            overwrite: true,
                            destDir: 'src/main/resources',
                    )
                }
    }
}

flyway {
    url = DB_URL
    user = DB_USER
    password = DB_PASSWORD
    locations = ["filesystem:$projectDir/database"]
}

spotless {
    java {
        importOrder()
        eclipse().configFile file("${rootDir}/eclipse-java-code-formatter.xml")
        removeUnusedImports()
    }
}

// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir
// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources
